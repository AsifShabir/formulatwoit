<?php

namespace App\Utils;

use App\Business;
use App\Category;
use App\Contact;
use App\Exceptions\PurchaseSellMismatch;
use App\MiraviaProduct;
use App\Product;
use App\TaxRate;
use App\Transaction;
use App\Utils\ContactUtil;
use App\Utils\ProductUtil;
use App\Utils\TransactionUtil;
use App\Utils\Util;
use App\VariationLocationDetails;
use App\VariationTemplate;
use Automattic\WooCommerce\Client;
use DB;
use App\MiraviaSyncLog;
use App\TransactionPayment;
use App\TransactionSellLine;
use Modules\Woocommerce\Exceptions\WooCommerceError;
use \IopClient;
use IopRequest;

class MiraviaUtil extends Util
{
    /**
     * All Utils instance.
     */
    protected $transactionUtil;

    protected $productUtil;

    private $client = null;
    /**
     * Constructor
     *
     * @param  ProductUtils  $product
     * @return void
     */
    public function __construct(TransactionUtil $transactionUtil, ProductUtil $productUtil)
    {
        $this->transactionUtil = $transactionUtil;
        $this->productUtil = $productUtil;
    }

    public function get_api_settings($business_id)
    {
        $business = Business::find($business_id);
        $miravia_api_settings = json_decode($business->miravia_api_settings);

        return $miravia_api_settings;
    }

    private function add_to_skipped_orders($business, $order_id)
    {
        $business = !is_object($business) ? Business::find($business) : $business;
        $skipped_orders = !empty($business->miravia_skipped_orders) ? json_decode($business->miravia_skipped_orders, true) : [];
        if (!in_array($order_id, $skipped_orders)) {
            $skipped_orders[] = $order_id;
        }

        $business->miravia_skipped_orders = json_encode($skipped_orders);
        $business->save();
    }

    private function remove_from_skipped_orders($business, $order_id)
    {
        $business = !is_object($business) ? Business::find($business) : $business;
        $skipped_orders = !empty($business->miravia_skipped_orders) ? json_decode($business->miravia_skipped_orders, true) : [];

        $skipped_orders = empty($skipped_orders) ? [] : $skipped_orders;

        if (in_array($order_id, $skipped_orders)) {
            $skipped_orders = array_diff($skipped_orders, [$order_id]);
        }

        $business->miravia_skipped_orders = json_encode($skipped_orders);
        $business->save();
    }

    /**
     * Creates Automattic\WooCommerce\Client object
     *
     * @param  int  $business_id
     * @return obj
     */
    private function miravia_client($business_id)
    {
        if ($this->client === null) {
            $miravia_api_settings = $this->get_api_settings($business_id);
            if (empty($miravia_api_settings)) {
                throw new WooCommerceError(__('woocommerce::lang.unable_to_connect'));
            }

            $this->client = new IopClient(
                'api.miravia.es/rest',
                $miravia_api_settings->miravia_app_key,
                $miravia_api_settings->miravia_app_secret
            );
        }

        return $this->client;
    }

    public function getMiraviaClient($business_id)
    {
        $client = $this->miravia_client($business_id);
        $miravia_api_settings = $this->get_api_settings($business_id);

        $request = new IopRequest('/seller/get', 'GET');
        $response = $client->execute($request, $miravia_api_settings->miravia_access_token);
        $result = json_decode($response);

        if (!empty($result->data)) {
            return 'success';
        } else {
            return 'fail';
        }
    }

    public function getProducts()
    {
        $business_id = request()->session()->get('user.business_id');
        $client = $this->miravia_client($business_id);
        $miravia_api_settings = $this->get_api_settings($business_id);

        $request = new IopRequest('/products/get', 'GET');  // Endpoint for getting products
        $response = $client->execute($request, $miravia_api_settings->miravia_access_token);
        $response = json_decode($response);

        $created_data = [];
        $updated_data = [];
        $create_error_data = [];
        $update_error_data = [];

        if (!empty($response->data->products)) {
            $products = $response->data->products;

            foreach ($products as $product) {
                $miravia_id = $product->item_id;
                $category = $product->primary_category;
                $base_name = $product->attributes->name;
                $brand = $product->attributes->brand;

                foreach ($product->skus as $index => $sku) {
                    $seller_sku = $sku->SellerSku;
                    $sku_id = $sku->SkuId;
                    $price = $sku->price;
                    $quantity = $sku->quantity;

                    // Append SKU number to the product name if there are multiple SKUs
                    $name = (count($product->skus) > 1) ? $base_name . " SKU " . ($index + 1) : $base_name;

                    $product_data = [
                        'miravia_id' => $miravia_id,
                        'type' => count($product->skus) == 1 ? 'single' : 'variable',
                        'sku_id' => $sku_id,
                        'seller_sku' => $seller_sku,
                        'category' => $category,
                        'name' => $name,
                        'brand' => $brand,
                        'price' => $price,
                        'quantity' => $quantity,
                        'business_id' => $business_id,
                    ];

                    // Check if the product with the same sku_id already exists
                    $existing_product = MiraviaProduct::where('sku_id', $sku_id)->first();
                    if ($existing_product) {
                        // Update the existing product
                        try {
                            $existing_product->update($product_data);
                            $updated_data[$miravia_id] = true;  // Ensure uniqueness by using associative array
                        } catch (\Exception $e) {
                            $update_error_data[$miravia_id] = $e->getMessage();
                        }
                    } else {
                        // Create a new product
                        try {
                            MiraviaProduct::create($product_data);
                            $created_data[$miravia_id] = true;  // Ensure uniqueness by using associative array
                        } catch (\Exception $e) {
                            $create_error_data[$miravia_id] = $e->getMessage();
                        }
                    }
                }
            }

            // Create logs
            $user_id = auth()->id();  // Assuming you're using Laravel's authentication

            if (!empty($created_data)) {
                $this->createSyncLog($business_id, $user_id, 'all_products', 'created', array_keys($created_data), $create_error_data);
            }
            if (!empty($updated_data)) {
                $this->createSyncLog($business_id, $user_id, 'new_products', 'updated', array_keys($updated_data), $update_error_data);
            }

            return 'success';
        } else {
            // Log failure
            $user_id = auth()->id();  // Assuming you're using Laravel's authentication
            $this->createSyncLog($business_id, $user_id, 'products', 'failed', [], ['No products found in response']);

            return 'fail';
        }
    }

    public function getOrders()
    {
        $user_id = auth()->id();
        $business_id = request()->session()->get('user.business_id');
        $client = $this->miravia_client($business_id);
        $miravia_api_settings = $this->get_api_settings($business_id);
        $miravia_access_token = $miravia_api_settings->miravia_access_token;
        $location_id = $miravia_api_settings->location_id;

        // Prepare request parameters
        $request = new IopRequest('/orders/get', 'GET');
        $request->addApiParam('created_after', '2022-01-01T00:00:00.000Z');
        $request->addApiParam('status', 'delivered');

        try {
            // Execute API request
            $response = $client->execute($request, $miravia_access_token);
            $response = json_decode($response);

            // Process response
            if (empty($response->data->count) || $response->data->count == 0) {
                $this->createSyncLog($business_id, $user_id, 'orders', 'failed', [], ['No orders found in response']);
                return 'fail';
            }

            $orders = $response->data->orders;
            $created_array = []; // Initialize the array to store created order IDs

            foreach ($orders as $order) {
                $order_items = $this->getOrderItems($order->order_id, $client, $miravia_access_token);

                if (!$order_items) {
                    $this->createSyncLog($business_id, $user_id, 'orders', 'failed', [], ['No products items found in response']);
                    return 'fail';
                }

                $order_id = $this->processOrder($order, $order_items, $business_id, $user_id, $location_id);
                if ($order_id) {
                    $created_array[] = $order_id;
                }



                $this->createSyncLog($business_id, $user_id, 'orders', 'created', $created_array, []);
                return 'success';
            }
        } catch (\Exception $e) {
            // Log failure if an exception occurs during API request
            $this->createSyncLog($business_id, $user_id, 'orders', 'failed', [], [$e->getMessage()]);
            return 'fail';
        }
    }

    /**
     * Process an individual order.
     *
     * @param object $order
     * @param int $business_id
     * @param int $user_id
     * @param int $location_id
     * @return void
     */
    private function processOrder($order, $order_items, $business_id, $user_id, $location_id)
    {
        $existing_order = Transaction::where('miravia_order_id', $order->order_number)->first();

        if ($existing_order) {
            return  [
                'order_id' => $existing_order->id,
                'status' => 'already_synced'
            ];
        } else {

            $status = $this->checkStatus($order->statuses);

            $order_data = [
                'business_id' => $business_id,
                'location_id' => $location_id,
                'type' => 'sell',
                'status' => $status,
                'miravia_order_id' => $order->order_number,
                'prefer_payment_method' => $order->payment_method,
                'shipping_charges' => $order->shipping_fee_original,
                'total_before_tax' => $order->price,
                'final_total' => $order->price,
                'created_by' => $user_id
            ];

            $transaction = Transaction::create($order_data);

            // Process sell line data
            foreach ($order_items as $item) {
                $product = Product::where('miravia_product_id', $item->product_id)->first();
                $variation = $product ? $product->variations->where('miravia_variation_id', $item->sku_id)->first() : null;

                $sell_line = [
                    'transaction_id' => $transaction->id,
                    'product_id' => $product->id ?? '0',
                    'variation_id' =>  isset($variation) ? $variation->id : '0',
                    'miravia_line_items_id' => $item->sku_id,
                    'quantity' => $order->items_count,
                    'unit_price' => $item->item_price,
                ];

                TransactionSellLine::create($sell_line);
            }

            if ($status == 'final') {
                $payment = [
                    'transaction_id' => $transaction->id,
                    'business_id' => $business_id,
                    'amount' => $order->price,
                    'method' => $order->payment_method,
                ];
                TransactionPayment::create($payment);
            }

            if ($transaction) {
                return $transaction->id; // Return the transaction ID if creation is successful
            } else {
                return null; // Return null if creation fails
            }
        }
    }

    /**
     * Get order items from the API
     *
     * @param int $order_id
     * @param object $client
     * @param string $miravia_access_token
     * @return object|null
     */
    private function getOrderItems($order_id, $client, $miravia_access_token)
    {
        $request = new IopRequest('/order/items/get', 'GET');
        $request->addApiParam('order_id', $order_id);
        $response = $client->execute($request, $miravia_access_token);
        $response = json_decode($response);

        return $response->data ?? null;
    }

    public function syncStock()
    {
        $user_id = auth()->id();
        $business_id = request()->session()->get('user.business_id');
        $client = $this->miravia_client($business_id);
        $miravia_api_settings = $this->get_api_settings($business_id);

        $products = Product::where('business_id', $business_id)
            ->whereIn('type', ['single', 'variable'])
            ->where('miravia_disable_sync', 0)
            ->with([
                'variations',
                'variations.variation_location_details',
                'variations.product_variation',
                'variations.product_variation.variation_template',
            ])->get();

        $updated_data = [];
        $update_error_data = [];

        foreach ($products as $product) {
            $miravia_product_id = $product->miravia_product_id;

            $fetch_request = new IopRequest('/product/item/get', 'GET');
            $fetch_request->addApiParam('item_id', $miravia_product_id);

            try {
                $fetch_response = $client->execute($fetch_request, $miravia_api_settings->miravia_access_token);
                $fetch_result = json_decode($fetch_response, true);

                if (empty($fetch_result['data'])) {
                    throw new \Exception('Product not found on Miravia.');
                }

                $product_data = $fetch_result['data'];
                $skus = $product_data['skus'];
                $skus_array = [];

                if ($miravia_product_id == $product_data['item_id']) {
                    $variations = $product->variations->where('product_id', $product->id);
                    // Assign unique SellerSku to each variation
                    foreach ($skus as $index => $sku) {
                        // Ensure that there are variations left to assign SellerSku
                        if (isset($variations[$index])) {
                            $variation = $variations[$index];
                            $variation->update([
                                'miravia_variation_id' => $sku['SellerSku']
                            ]);
                        }
                    }

                    foreach ($variations as $variation) {
                        // Find the matching SKU based on the variation's miravia_variation_id
                        $matching_sku = collect($skus)->firstWhere('SellerSku', $variation->miravia_variation_id);

                        if ($matching_sku) {
                            // Process the matching SKU
                            $location_details = $variation->variation_location_details->firstWhere('location_id', $miravia_api_settings->location_id);
                            if ($location_details) {
                                // Build the skus_array with the matched SKU details
                                $skus_array[] = [
                                    "quantity" => (int) $location_details->qty_available,
                                    "SellerSku" => $matching_sku['SellerSku'],
                                    "ean_code" => $matching_sku['ean_code'],
                                    "price" => (float) $matching_sku['price'],
                                    "package_length" => (float) $matching_sku['package_length'],
                                    "package_weight" => (float) $matching_sku['package_weight'],
                                    "package_width" => (float) $matching_sku['package_width'],
                                    "package_height" => (float) $matching_sku['package_height']
                                ];
                            }
                        } else {
                            // Handle case where no matching SKU is found
                            throw new \Exception('No matching SKU found for variation ID: ' . $variation->id);
                        }
                    }
                } else {
                    throw new \Exception('Product not found on Miravia.');
                }

                $images_array = array_map(function ($image) {
                    return $image;
                }, $product_data['images']);

                $update_payload = [
                    "Request" => [
                        "Product" => [
                            "ItemId" => $miravia_product_id,
                            "Images" => [
                                "Image" => $images_array
                            ],
                            "Attributes" => [
                                "name" => $product_data['attributes']['name'] ?? '',
                                "short_description" => $product_data['attributes']['short_description'] ?? '',
                                "description" => $product_data['attributes']['description'] ?? '',
                                "brand" => $product_data['attributes']['brand'] ?? '',
                                "warranty_type" => $product_data['attributes']['warranty_type'] ?? ''
                            ],
                            "Skus" => [
                                "Sku" => $skus_array // Corrected nested array structure
                            ]
                        ]
                    ]
                ];

                // $paylaod = json_encode($update_payload);
                // dd($paylaod);

                $update_request = new IopRequest('/product/update', 'POST');
                $update_request->addApiParam('payload', json_encode($update_payload));

                $update_response = $client->execute($update_request, $miravia_api_settings->miravia_access_token);
                $update_result = json_decode($update_response, true);

                // dd($update_result);
                if ($update_result['code'] == 0) {
                    $updated_data[] = $miravia_product_id;
                }
            } catch (\Exception $e) {
                $update_error_data[$miravia_product_id] = $e->getMessage();
            }
        }

        if (!empty($updated_data)) {
            $this->createSyncLog($business_id, $user_id, 'stock', 'updated', $updated_data, $update_error_data);
        }

        return $updated_data;
    }


    // public function syncCat($business_id, $data, $type, $new_categories = [])
    // {

    //     //woocommerce api client object
    //     $miravia = $this->miravia_client($business_id);
    //     $count = 0;
    //     foreach (array_chunk($data, 99) as $chunked_array) {
    //         $sync_data = [];
    //         $sync_data[$type] = $chunked_array;
    //         //Batch update categories

    //         $response = $miravia->post('products/categories/batch', $sync_data);

    //         //update miravia_cat_id
    //         if (!empty($response->create)) {
    //             foreach ($response->create as $key => $value) {
    //                 $new_category = $new_categories[$count];
    //                 if ($value->id != 0) {
    //                     $new_category->miravia_cat_id = $value->id;
    //                 } else {
    //                     if (!empty($value->error->data->resource_id)) {
    //                         $new_category->miravia_cat_id = $value->error->data->resource_id;
    //                     }
    //                 }
    //                 $new_category->save();
    //                 $count++;
    //             }
    //         }
    //     }
    // }

    /**
     * Synchronizes pos categories with Woocommerce categories
     *
     * @param  int  $business_id
     * @return void
     */
    // public function syncCategories($business_id, $user_id)
    // {
    //     $last_synced = $this->getLastSync($business_id, 'categories', false);

    //     //Update parent categories
    //     $query = Category::where('business_id', $business_id)
    //         ->where('category_type', 'product')
    //         ->where('parent_id', 0);

    //     //Limit query to last sync
    //     if (!empty($last_synced)) {
    //         $query->where('updated_at', '>', $last_synced);
    //     }

    //     $categories = $query->get();

    //     $category_data = [];
    //     $new_categories = [];
    //     $created_data = [];
    //     $updated_data = [];
    //     foreach ($categories as $category) {
    //         if (empty($category->miravia_cat_id)) {
    //             $category_data['create'][] = [
    //                 'name' => $category->name,
    //             ];
    //             $new_categories[] = $category;
    //             $created_data[] = $category->name;
    //         } else {
    //             $category_data['update'][] = [
    //                 'id' => $category->miravia_cat_id,
    //                 'name' => $category->name,
    //             ];
    //             $updated_data[] = $category->name;
    //         }
    //     }

    //     if (!empty($category_data['create'])) {
    //         $this->syncCat($business_id, $category_data['create'], 'create', $new_categories);
    //     }
    //     if (!empty($category_data['update'])) {
    //         $this->syncCat($business_id, $category_data['update'], 'update', $new_categories);
    //     }

    //     //Sync child categories
    //     $query2 = Category::where('business_id', $business_id)
    //         ->where('category_type', 'product')
    //         ->where('parent_id', '!=', 0);
    //     //Limit query to last sync
    //     if (!empty($last_synced)) {
    //         $query2->where('updated_at', '>', $last_synced);
    //     }

    //     $child_categories = $query2->get();

    //     $cat_id_miravia_id = Category::where('business_id', $business_id)
    //         ->where('parent_id', 0)
    //         ->where('category_type', 'product')
    //         ->pluck('miravia_cat_id', 'id')
    //         ->toArray();

    //     $category_data = [];
    //     $new_categories = [];
    //     foreach ($child_categories as $category) {
    //         if (empty($cat_id_miravia_id[$category->parent_id])) {
    //             continue;
    //         }

    //         if (empty($category->miravia_cat_id)) {
    //             $category_data['create'][] = [
    //                 'name' => $category->name,
    //                 'parent' => $cat_id_miravia_id[$category->parent_id],
    //             ];
    //             $new_categories[] = $category;
    //             $created_data[] = $category->name;
    //         } else {
    //             $category_data['update'][] = [
    //                 'id' => $category->miravia_cat_id,
    //                 'name' => $category->name,
    //                 'parent' => $cat_id_miravia_id[$category->parent_id],
    //             ];
    //             $updated_data[] = $category->name;
    //         }
    //     }

    //     if (!empty($category_data['create'])) {
    //         $this->syncCat($business_id, $category_data['create'], 'create', $new_categories);
    //     }
    //     if (!empty($category_data['update'])) {
    //         $this->syncCat($business_id, $category_data['update'], 'update', $new_categories);
    //     }

    //     //Create log
    //     if (!empty($created_data)) {
    //         $this->createSyncLog($business_id, $user_id, 'categories', 'created', $created_data);
    //     }
    //     if (!empty($updated_data)) {
    //         $this->createSyncLog($business_id, $user_id, 'categories', 'updated', $updated_data);
    //     }
    //     if (empty($created_data) && empty($updated_data)) {
    //         $this->createSyncLog($business_id, $user_id, 'categories');
    //     }
    // }

    /**
     * Synchronizes pos products with Woocommerce products
     *
     * @param  int  $business_id
     * @return void
     */
    public function syncProducts($business_id, $user_id, $sync_type, $limit = 100, $page = 0)
    {
        //$limit is zero for console command
        if ($page == 0 || $limit == 0) {

            //Sync variation attributes
            // $this->syncVariationAttributes($business_id);

            if ($limit > 0) {
                request()->session()->forget('last_product_synced');
            }
        }

        $last_synced = !empty(session('last_product_synced')) ? session('last_product_synced') : $this->getLastSync($business_id, 'all_products', false);
        //store last_synced if page is 0
        if ($page == 0) {
            session(['last_product_synced' => $last_synced]);
        }

        $miravia_api_settings = $this->get_api_settings($business_id);
        $created_data = [];
        $updated_data = [];

        $business_location_id = $miravia_api_settings->location_id;
        $offset = $page * $limit;
        $query = Product::where('business_id', $business_id)
            ->whereIn('type', ['single', 'variable'])
            ->where('miravia_disable_sync', 0)
            ->with([
                'variations',
                'variations.variation_location_details',
                'variations.product_variation',
                'variations.product_variation.variation_template',
            ]);

        if ($limit > 0) {
            $query->limit($limit)
                ->offset($offset);
        }

        if ($sync_type == 'new') {
            $query->whereNull('miravia_product_id');
        }

        //Select products only from selected location
        if (!empty($business_location_id)) {
            $query->ForLocation($business_location_id);
        }

        $all_products = $query->get();

        // dd($all_products);
        $product_data = [];
        $new_products = [];
        $updated_products = [];

        if (count($all_products) == 0) {
            request()->session()->forget('last_product_synced');
        }

        foreach ($all_products as $product) {
            //Skip product if last updated is less than last sync
            $last_updated = $product->updated_at;
            //check last stock updated
            $last_stock_updated = $this->getLastStockUpdated($business_location_id, $product->id);

            if (!empty($last_stock_updated)) {
                $last_updated = strtotime($last_stock_updated) > strtotime($last_updated) ?
                    $last_stock_updated : $last_updated;
            }
            if (!empty($product->miravia_product_id) && !empty($last_synced) && strtotime($last_updated) < strtotime($last_synced)) {
                continue;
            }

            //Set common data
            $array = [
                'type' => $product->type == 'single' ? 'simple' : 'variable',
                'sku' => $product->sku,
            ];

            $manage_stock = false;
            if ($product->enable_stock == 1 && $product->type == 'single') {
                $manage_stock = true;
            }

            //Get details from first variation for single product only
            $first_variation = $product->variations->first();
            if (empty($first_variation)) {
                continue;
            }
            $price = $miravia_api_settings->product_tax_type == 'exc' ? $first_variation->default_sell_price : $first_variation->sell_price_inc_tax;

            if (!empty($miravia_api_settings->default_selling_price_group)) {
                $group_prices = $this->productUtil->getVariationGroupPrice($first_variation->id, $miravia_api_settings->default_selling_price_group, $product->tax_id);

                $price = $miravia_api_settings->product_tax_type == 'exc' ? $group_prices['price_exc_tax'] : $group_prices['price_inc_tax'];
            }

            //Set product stock
            $qty_available = 0;
            if ($manage_stock) {
                $variation_location_details = $first_variation->variation_location_details;
                foreach ($variation_location_details as $vld) {
                    if ($vld->location_id == $business_location_id) {
                        $qty_available = $vld->qty_available;
                    }
                }
            }

            //Set product category
            // $product_cat = [];
            // if (!empty($product->category)) {
            //     $product_cat[] = ['id' => $product->category->miravia_cat_id];
            // }
            // if (!empty($product->sub_category)) {
            //     $product_cat[] = ['id' => $product->sub_category->miravia_cat_id];
            // }

            // dd($product);
            //set attributes for variable products
            if ($product->type == 'variable') {
                $variation_attr_data = [];

                foreach ($product->variations as $variation) {
                    if (!empty($variation->product_variation->variation_template->miravia_attr_id)) {
                        $miravia_attr_id = $variation->product_variation->variation_template->miravia_attr_id;
                        $variation_attr_data[$miravia_attr_id][] = $variation->name;
                    }
                }

                foreach ($variation_attr_data as $key => $value) {
                    $array['attributes'][] = [
                        'id' => $key,
                        'variation' => true,
                        'visible' => true,
                        'options' => $value,
                    ];
                }
            }

            $sync_description_as = !empty($miravia_api_settings->sync_description_as) ? $miravia_api_settings->sync_description_as : 'long';

            if (empty($product->miravia_product_id)) {
                $array['tax_class'] = !empty($miravia_api_settings->default_tax_class) ?
                    $miravia_api_settings->default_tax_class : 'standard';

                //assign category
                if (in_array('category', $miravia_api_settings->product_fields_for_create)) {
                    if (!empty($product_cat)) {
                        $array['categories'] = $product_cat;
                    }
                }

                if (in_array('weight', $miravia_api_settings->product_fields_for_create)) {
                    $array['weight'] = $this->formatDecimalPoint($product->weight);
                }

                //sync product description
                if (in_array('description', $miravia_api_settings->product_fields_for_create)) {
                    if ($sync_description_as == 'long') {
                        $array['description'] = $product->product_description;
                    } elseif ($sync_description_as == 'short') {
                        $array['short_description'] = $product->product_description;
                    } else {
                        $array['description'] = $product->product_description;
                        $array['short_description'] = $product->product_description;
                    }
                }

                //Set product image url
                //If media id is set use media id else use image src
                if (!empty($product->image) && in_array('image', $miravia_api_settings->product_fields_for_create)) {
                    if ($this->isValidImage($product->image_path)) {
                        $array['images'] = !empty($product->miravia_media_id) ? [['id' => $product->miravia_media_id]] : [['src' => $product->image_url]];
                    }
                }

                //assign quantity and price if single product
                if ($product->type == 'single') {
                    $array['manage_stock'] = $manage_stock;
                    if (in_array('quantity', $miravia_api_settings->product_fields_for_create)) {
                        $array['stock_quantity'] = $this->formatDecimalPoint($qty_available, 'quantity');
                    } else {
                        //set manage stock and in_stock if quantity disabled
                        if (isset($miravia_api_settings->manage_stock_for_create)) {
                            if ($miravia_api_settings->manage_stock_for_create == 'true') {
                                $array['manage_stock'] = true;
                            } elseif ($miravia_api_settings->manage_stock_for_create == 'false') {
                                $array['manage_stock'] = false;
                            } else {
                                unset($array['manage_stock']);
                            }
                        }
                        if (isset($miravia_api_settings->in_stock_for_create)) {
                            if ($miravia_api_settings->in_stock_for_create == 'true') {
                                $array['in_stock'] = true;
                            } elseif ($miravia_api_settings->in_stock_for_create == 'false') {
                                $array['in_stock'] = false;
                            }
                        }
                    }

                    $array['regular_price'] = $this->formatDecimalPoint($price);
                }

                //assign name
                $array['name'] = $product->name;

                $product_data['create'][] = $array;
                $new_products[] = $product;

                $created_data[] = $product->sku;
            } else {
                $array['id'] = $product->miravia_product_id;
                //assign category
                if (in_array('category', $miravia_api_settings->product_fields_for_update)) {
                    if (!empty($product_cat)) {
                        $array['categories'] = $product_cat;
                    }
                }

                if (in_array('weight', $miravia_api_settings->product_fields_for_update)) {
                    $array['weight'] = $this->formatDecimalPoint($product->weight);
                }

                //sync product description
                if (in_array('description', $miravia_api_settings->product_fields_for_update)) {
                    if ($sync_description_as == 'long') {
                        $array['description'] = $product->product_description;
                    } elseif ($sync_description_as == 'short') {
                        $array['short_description'] = $product->product_description;
                    } else {
                        $array['description'] = $product->product_description;
                        $array['short_description'] = $product->product_description;
                    }
                }

                //If media id is set use media id else use image src
                if (!empty($product->image) && in_array('image', $miravia_api_settings->product_fields_for_update)) {
                    if ($this->isValidImage($product->image_path)) {
                        $array['images'] = !empty($product->miravia_media_id) ? [['id' => $product->miravia_media_id]] : [['src' => $product->image_url]];
                    }
                }

                if ($product->type == 'single') {
                    //assign quantity
                    $array['manage_stock'] = $manage_stock;
                    if (in_array('quantity', $miravia_api_settings->product_fields_for_update)) {
                        $array['stock_quantity'] = $this->formatDecimalPoint($qty_available, 'quantity');
                    } else {
                        //set manage stock and in_stock if quantity disabled
                        if (isset($miravia_api_settings->manage_stock_for_update)) {
                            if ($miravia_api_settings->manage_stock_for_update == 'true') {
                                $array['manage_stock'] = true;
                            } elseif ($miravia_api_settings->manage_stock_for_update == 'false') {
                                $array['manage_stock'] = false;
                            } else {
                                unset($array['manage_stock']);
                            }
                        }
                        if (isset($miravia_api_settings->in_stock_for_update)) {
                            if ($miravia_api_settings->in_stock_for_update == 'true') {
                                $array['in_stock'] = true;
                            } elseif ($miravia_api_settings->in_stock_for_update == 'false') {
                                $array['in_stock'] = false;
                            }
                        }
                    }
                    //assign price
                    if (in_array('price', $miravia_api_settings->product_fields_for_update)) {
                        $array['regular_price'] = $this->formatDecimalPoint($price);
                    }
                }

                //assign name
                if (in_array('name', $miravia_api_settings->product_fields_for_update)) {
                    $array['name'] = $product->name;
                }

                $product_data['update'][] = $array;
                $updated_data[] = $product->sku;
                $updated_products[] = $product;
            }
        }

        $create_response = [];
        $update_response = [];

        if (!empty($product_data['create'])) {
            $create_response = $this->syncProd($business_id, $product_data['create'], 'create', $new_products);
        }
        if (!empty($product_data['update'])) {
            $update_response = $this->syncProd($business_id, $product_data['update'], 'update', $updated_products);
        }
        $new_miravia_product_ids = array_merge($create_response, $update_response);

        //Create log
        if (!empty($created_data)) {
            if ($sync_type == 'new') {
                $this->createSyncLog($business_id, $user_id, 'new_products', 'created', $created_data);
            } else {
                $this->createSyncLog($business_id, $user_id, 'all_products', 'created', $created_data);
            }
        }
        if (!empty($updated_data)) {
            $this->createSyncLog($business_id, $user_id, 'all_products', 'updated', $updated_data);
        }

        //Sync variable product variations
        $this->syncProductVariations($business_id, $sync_type, $new_miravia_product_ids);

        if (empty($created_data) && empty($updated_data)) {
            if ($sync_type == 'new') {
                $this->createSyncLog($business_id, $user_id, 'new_products');
            } else {
                $this->createSyncLog($business_id, $user_id, 'all_products');
            }
        }

        return $all_products;
    }

    public function syncProd($business_id, $data, $type, $new_products)
    {
        //woocommerce api client object
        $miravia = $this->miravia_client($business_id);

        $new_miravia_product_ids = [];
        $count = 0;
        foreach (array_chunk($data, 99) as $chunked_array) {
            $sync_data = [];
            $sync_data[$type] = $chunked_array;
            $response = $miravia->post('products/batch', $sync_data);
            if (!empty($response->create)) {
                foreach ($response->create as $key => $value) {
                    $new_product = $new_products[$count];
                    if ($value->id != 0) {
                        $new_product->miravia_product_id = $value->id;
                        //Sync woocommerce media id
                        $new_product->miravia_media_id = !empty($value->images[0]->id) ? $value->images[0]->id : null;
                    } else {
                        if (!empty($value->error->data->resource_id)) {
                            $new_product->miravia_product_id = $value->error->data->resource_id;
                        }
                    }
                    $new_product->save();

                    $new_miravia_product_ids[] = $new_product->miravia_product_id;
                    $count++;
                }
            }

            if (!empty($response->update)) {
                foreach ($response->update as $key => $value) {
                    $updated_product = $new_products[$count];
                    if ($value->id != 0) {
                        //Sync woocommerce media id
                        $updated_product->miravia_media_id = !empty($value->images[0]->id) ? $value->images[0]->id : null;
                        $updated_product->save();
                    }
                    $new_miravia_product_ids[] = $updated_product->miravia_product_id;
                    $count++;
                }
            }
        }

        return $new_miravia_product_ids;
    }

    /**
     * Synchronizes pos variation templates with Woocommerce product attributes
     *
     * @param  int  $business_id
     * @return void
     */
    public function syncVariationAttributes($business_id)
    {
        $miravia = $this->miravia_client($business_id);
        $query = VariationTemplate::where('business_id', $business_id);

        $attributes = $query->get();
        $data = [];
        $new_attrs = [];
        foreach ($attributes as $attr) {
            if (empty($attr->miravia_attr_id)) {
                $data['create'][] = ['name' => $attr->name];
                $new_attrs[] = $attr;
            } else {
                $data['update'][] = [
                    'name' => $attr->name,
                    'id' => $attr->miravia_attr_id,
                ];
            }
        }

        if (!empty($data)) {
            $response = $miravia->post('products/attributes/batch', $data);

            //update miravia_attr_id
            if (!empty($response->create)) {
                foreach ($response->create as $key => $value) {
                    $new_attr = $new_attrs[$key];
                    if ($value->id != 0) {
                        $new_attr->miravia_attr_id = $value->id;
                    } else {
                        $all_attrs = $miravia->get('products/attributes');
                        foreach ($all_attrs as $attr) {
                            if (strtolower($attr->name) == strtolower($new_attr->name)) {
                                $new_attr->miravia_attr_id = $attr->id;
                            }
                        }
                    }
                    $new_attr->save();
                }
            }
        }
    }

    /**
     * Synchronizes pos products variations with Woocommerce product variations
     *
     * @param  int  $business_id
     * @param  string  $sync_type
     * @param  array  $new_miravia_product_ids (woocommerce product id of newly created products to sync)
     * @return void
     */
    public function syncProductVariations($business_id, $sync_type = 'all', $new_miravia_product_ids = [])
    {
        //woocommerce api client object
        $miravia = $this->miravia_client($business_id);
        $miravia_api_settings = $this->get_api_settings($business_id);

        $query = Product::where('business_id', $business_id)
            ->where('type', 'variable')
            ->where('miravia_disable_sync', 0)
            ->with([
                'variations',
                'variations.variation_location_details',
                'variations.product_variation',
                'variations.product_variation.variation_template',
            ]);

        $query->whereIn('miravia_product_id', $new_miravia_product_ids);

        $variable_products = $query->get();
        $business_location_id = $miravia_api_settings->location_id;
        foreach ($variable_products as $product) {

            //Skip product if last updated is less than last sync
            $last_updated = $product->updated_at;

            $last_stock_updated = $this->getLastStockUpdated($business_location_id, $product->id);

            if (!empty($last_stock_updated)) {
                $last_updated = strtotime($last_stock_updated) > strtotime($last_updated) ?
                    $last_stock_updated : $last_updated;
            }
            if (!empty($last_synced) && strtotime($last_updated) < strtotime($last_synced)) {
                continue;
            }

            $variations = $product->variations;

            $variation_data = [];
            $new_variations = [];
            $updated_variations = [];
            foreach ($variations as $variation) {
                $variation_arr = [
                    'sku' => $variation->sub_sku,
                ];

                $manage_stock = false;
                if ($product->enable_stock == 1) {
                    $manage_stock = true;
                }

                if (!empty($variation->product_variation->variation_template->miravia_attr_id)) {
                    $variation_arr['attributes'][] = [
                        'id' => $variation->product_variation->variation_template->miravia_attr_id,
                        'option' => $variation->name,
                    ];
                }

                $price = $miravia_api_settings->product_tax_type == 'exc' ? $variation->default_sell_price : $variation->sell_price_inc_tax;

                if (!empty($miravia_api_settings->default_selling_price_group)) {
                    $group_prices = $this->productUtil->getVariationGroupPrice($variation->id, $miravia_api_settings->default_selling_price_group, $product->tax_id);

                    $price = $miravia_api_settings->product_tax_type == 'exc' ? $group_prices['price_exc_tax'] : $group_prices['price_inc_tax'];
                }

                //Set product stock
                $qty_available = 0;
                if ($product->enable_stock == 1) {
                    $variation_location_details = $variation->variation_location_details;
                    foreach ($variation_location_details as $vld) {
                        if ($vld->location_id == $business_location_id) {
                            $qty_available = $vld->qty_available;
                        }
                    }
                }

                if (empty($variation->miravia_variation_id)) {
                    $variation_arr['manage_stock'] = $manage_stock;
                    if (in_array('quantity', $miravia_api_settings->product_fields_for_create)) {
                        $variation_arr['stock_quantity'] = $this->formatDecimalPoint($qty_available, 'quantity');
                    } else {
                        //set manage stock and in_stock if quantity disabled
                        if (isset($miravia_api_settings->manage_stock_for_create)) {
                            if ($miravia_api_settings->manage_stock_for_create == 'true') {
                                $variation_arr['manage_stock'] = true;
                            } elseif ($miravia_api_settings->manage_stock_for_create == 'false') {
                                $variation_arr['manage_stock'] = false;
                            } else {
                                unset($variation_arr['manage_stock']);
                            }
                        }
                        if (isset($miravia_api_settings->in_stock_for_create)) {
                            if ($miravia_api_settings->in_stock_for_create == 'true') {
                                $variation_arr['in_stock'] = true;
                            } elseif ($miravia_api_settings->in_stock_for_create == 'false') {
                                $variation_arr['in_stock'] = false;
                            }
                        }
                    }

                    //Set variation images
                    //If media id is set use media id else use image src
                    if (!empty($variation->media) && count($variation->media) > 0 && in_array('image', $miravia_api_settings->product_fields_for_create)) {
                        $url = $variation->media->first()->display_url;
                        $path = $variation->media->first()->display_path;
                        $miravia_media_id = $variation->media->first()->miravia_media_id;
                        if ($this->isValidImage($path)) {
                            $variation_arr['image'] = !empty($miravia_media_id) ? ['id' => $miravia_media_id] : ['src' => $url];
                        }
                    }

                    $variation_arr['regular_price'] = $this->formatDecimalPoint($price);
                    $new_variations[] = $variation;

                    $variation_data['create'][] = $variation_arr;
                } else {
                    $variation_arr['id'] = $variation->miravia_variation_id;
                    $variation_arr['manage_stock'] = $manage_stock;
                    if (in_array('quantity', $miravia_api_settings->product_fields_for_update)) {
                        $variation_arr['stock_quantity'] = $this->formatDecimalPoint($qty_available, 'quantity');
                    } else {
                        //set manage stock and in_stock if quantity disabled
                        if (isset($miravia_api_settings->manage_stock_for_update)) {
                            if ($miravia_api_settings->manage_stock_for_update == 'true') {
                                $variation_arr['manage_stock'] = true;
                            } elseif ($miravia_api_settings->manage_stock_for_update == 'false') {
                                $variation_arr['manage_stock'] = false;
                            } else {
                                unset($variation_arr['manage_stock']);
                            }
                        }
                        if (isset($miravia_api_settings->in_stock_for_update)) {
                            if ($miravia_api_settings->in_stock_for_update == 'true') {
                                $variation_arr['in_stock'] = true;
                            } elseif ($miravia_api_settings->in_stock_for_update == 'false') {
                                $variation_arr['in_stock'] = false;
                            }
                        }
                    }

                    //Set variation images
                    //If media id is set use media id else use image src
                    if (!empty($variation->media) && count($variation->media) > 0 && in_array('image', $miravia_api_settings->product_fields_for_update)) {
                        $url = $variation->media->first()->display_url;
                        $path = $variation->media->first()->display_path;
                        $miravia_media_id = $variation->media->first()->miravia_media_id;
                        if ($this->isValidImage($path)) {
                            $variation_arr['image'] = !empty($miravia_media_id) ? ['id' => $miravia_media_id] : ['src' => $url];
                        }
                    }

                    //assign price
                    if (in_array('price', $miravia_api_settings->product_fields_for_update)) {
                        $variation_arr['regular_price'] = $this->formatDecimalPoint($price);
                    }

                    $variation_data['update'][] = $variation_arr;
                    $updated_variations[] = $variation;
                }
            }

            if (!empty($variation_data)) {
                $response = $miravia->post('products/' . $product->miravia_product_id . '/variations/batch', $variation_data);

                //update miravia_variation_id
                if (!empty($response->create)) {
                    foreach ($response->create as $key => $value) {
                        $new_variation = $new_variations[$key];
                        if ($value->id != 0) {
                            $new_variation->miravia_variation_id = $value->id;
                            $media = $new_variation->media->first();
                            if (!empty($media)) {
                                $media->miravia_media_id = !empty($value->image->id) ? $value->image->id : null;
                                $media->save();
                            }
                        } else {
                            if (!empty($value->error->data->resource_id)) {
                                $new_variation->miravia_variation_id = $value->error->data->resource_id;
                            }
                        }
                        $new_variation->save();
                    }
                }

                //Update media id if changed from woocommerce site
                if (!empty($response->update)) {
                    foreach ($response->update as $key => $value) {
                        $updated_variation = $updated_variations[$key];
                        if ($value->id != 0) {
                            $media = $updated_variation->media->first();
                            if (!empty($media)) {
                                $media->miravia_media_id = !empty($value->image->id) ? $value->image->id : null;
                                $media->save();
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Synchronizes Woocommers Orders with POS sales
     *
     * @param  int  $business_id
     * @param  int  $user_id
     * @return void
     */
    public function syncOrders($business_id, $user_id)
    {
        $last_synced = $this->getLastSync($business_id, 'orders', false);
        $orders = $this->getMiraviaOrders($business_id);
       
        //dd($orders);
        
        // $orders = !empty($response['data']['orders']) ? $response['data']['orders'] : [];

        $miravia_sells = Transaction::where('business_id', $business_id)
            ->whereNotNull('miravia_order_id')
            ->with('sell_lines', 'sell_lines.product', 'payment_lines')
            ->get();

        $new_orders = [];
        $updated_orders = [];

        $miravia_api_settings = $this->get_api_settings($business_id);
        $business = Business::find($business_id);

        $skipped_orders = !empty($business->miravia_skipped_orders) ? json_decode($business->miravia_skipped_orders, true) : [];

        $business_data = [
            'id' => $business_id,
            'accounting_method' => $business->accounting_method,
            'location_id' => $miravia_api_settings->location_id,
            'pos_settings' => json_decode($business->pos_settings, true),
            'business' => $business,
        ];

        $created_data = [];
        $updated_data = [];
        $create_error_data = [];
        $update_error_data = [];


        // dd($orders);
        foreach ($orders as $order) {
            //Only consider orders modified after last sync
            if ((!empty($last_synced) && strtotime($order['updated_at']) <= strtotime($last_synced) && !in_array($order['order_number'], $skipped_orders)) || in_array($order['statuses'], ['canceled'])) {
                continue;
            }

            //Search if order already exists
            $sell = $miravia_sells->filter(function ($item) use ($order) {
                return $item->miravia_order_id == $order['order_number'];
            })->first();

            $order_number = $order['order_number'];

            $sell_status = $this->checkStatus($order['statuses']);

            if ($sell_status == 'draft') {
                $order_number .= ' (' . __('sale.draft') . ')';
            }

            if (empty($sell)) {
                $created = $this->createNewSaleFromOrder($business_id, $user_id, $order, $business_data);
                $created_data[] = $order_number;

                if ($created !== true) {
                    $create_error_data[] = $created;
                }
            } else {
                $updated = $this->updateSaleFromOrder($business_id, $user_id, $order, $sell, $business_data);
                $updated_data[] = $order_number;

                if ($updated !== true) {
                    $update_error_data[] = $updated;
                }
            }
        }
        
        // Create log
        if (!empty($created_data)) {
            $this->createSyncLog($business_id, $user_id, 'orders', 'created', $created_data, $create_error_data);
        }
        if (!empty($updated_data)) {
            $this->createSyncLog($business_id, $user_id, 'orders', 'updated', $updated_data, $update_error_data);
        }

        if (empty($created_data) && empty($updated_data)) {
            $error_data = array_merge($create_error_data, $update_error_data);
            $this->createSyncLog($business_id, $user_id, 'orders', null, [], $error_data);
        }
    }

    public function getMiraviaOrders($business_id)
    {
        $miravia_api_settings = $this->get_api_settings($business_id);
        $miravia_access_token = $miravia_api_settings->miravia_access_token;

        $client = $this->miravia_client($business_id);

        // Define the statuses you want to fetch
        $statuses = ['ready_to_ship', 'delivered'];
        $orders = [];

        foreach ($statuses as $status) {
            // Prepare the request parameters for fetching orders with the specific status
            $request = new IopRequest('/orders/get', 'GET');
            $request->addApiParam('created_after', '2022-01-01T00:00:00.000Z');
            $request->addApiParam('status', $status);

            // Execute the API request to get orders with the specific status
            $response = $client->execute($request, $miravia_access_token);
            $response_data = json_decode($response, true);

            if (isset($response_data['data']['orders']) && is_array($response_data['data']['orders'])) {
                foreach ($response_data['data']['orders'] as $order) {
                    $orders[$order['order_id']] = $order;
                }
            }
        }

        // Convert associative array back to a regular array
        return array_values($orders);
    }


    /**
     * Creates new sales in POSfrom woocommerce order list
     *
     * @param  id  $business_id
     * @param  id  $user_id
     * @param  obj  $order
     * @param  array  $business_data
     */
    public function createNewSaleFromOrder($business_id, $user_id, $order, $business_data)
    {
        $input = $this->formatOrderToSale($business_id, $user_id, $order);

        // dd('createNewSaleFromOrder', $input);
        $input['miravia_order_id'] = $order['order_number'];

        if (!empty($input['has_error'])) {
            return $input['has_error'];
        }

        $invoice_total = [
            'total_before_tax' => $order['price'],
            'tax' => 0,
        ];

        DB::beginTransaction();

        $transaction = $this->transactionUtil->createSellTransaction($business_id, $input, $invoice_total, $user_id, false);

        //Create sell lines
        $this->transactionUtil->createOrUpdateSellLines($transaction, $input['products'], $input['location_id'], false, null, ['miravia_line_items_id' => 'line_item_id'], false);

        $this->transactionUtil->createOrUpdatePaymentLines($transaction, $input['payment'], $business_id, $user_id, false);

        if ($input['status'] == 'final') {
            //update product stock
            foreach ($input['products'] as $product) {
                if ($product['enable_stock']) {
                    $this->productUtil->decreaseProductQuantity(
                        $product['product_id'],
                        $product['variation_id'],
                        $input['location_id'],
                        $product['quantity']
                    );
                }
            }

            //Update payment status
            $transaction->payment_status = 'paid';
            $transaction->source = "Miravia";
            $transaction->save();

            // dd('final Transaction', $transaction);
            try {
                $this->transactionUtil->mapPurchaseSell($business_data, $transaction->sell_lines, 'purchase');
            } catch (PurchaseSellMismatch $e) {
                dd($e);
                DB::rollBack();

                $this->add_to_skipped_orders($business_data['business'], $order['order_id']);

                return [
                    'error_type' => 'order_insuficient_product_qty',
                    'order_number' => $order['order_id'],
                    'msg' => $e->getMessage(),
                ];
            }
        }

        $this->remove_from_skipped_orders($business_data['business'], $order['order_id']);

        DB::commit();

        return true;
    }


    /**
     * Formats Woocommerce order response to pos sale request
     *
     * @param  id  $business_id
     * @param  id  $user_id
     * @param  obj  $order
     * @param  obj  $sell = null
     */
    public function formatOrderToSale($business_id, $user_id, $order, $sell = null)
    {
        $miravia_api_settings = $this->get_api_settings($business_id);
        $miravia_access_token = $miravia_api_settings->miravia_access_token;

        // Create sell line data
        $product_lines = [];

        // For updating sell lines
        $sell_lines = [];
        if (!empty($sell)) {
            $sell_lines = $sell->sell_lines;
        }

        // Get Miravia order items
        $order_items = [];
        try {
            $client = $this->miravia_client($business_id);
            $request = new IopRequest('/order/items/get', 'GET');
            $request->addApiParam('order_id', $order['order_id']);

            // Execute the API request to get order items
            $response = $client->execute($request, $miravia_access_token);
            $items = json_decode($response, true);
            $order_items = $items['data'] ?? [];
        } catch (\Exception $e) {
            return [];
        }

        foreach ($order_items as $product_line) {
            $quantity = $product_line['quantity'] ?? $order['items_count'];

            if ($quantity < 1) {
                continue;
            }

            $product = Product::where('business_id', $business_id)
                ->where('miravia_product_id', $product_line['product_id'])
                ->with(['variations'])
                ->first();

            $order['customer_email'] = $product_line['digital_delivery_info'] ?? null;

            $unit_price = $product_line['item_price'];
            $line_tax = $product_line['tax_amount'] ?? 0;
            $unit_price_inc_tax = $unit_price + $line_tax;

            if (!empty($product)) {
                // Set sale line variation; If single product then first variation
                // else search for miravia_variation_id in all the variations
                $variation = null;
                if ($product->type == 'single') {
                    $variation = $product->variations->first();
                } else {
                    foreach ($product->variations as $v) {
                        if ($v->miravia_variation_id == $product_line['sku_id']) {
                            $variation = $v;
                            break;
                        }
                    }
                }

                if (empty($variation)) {
                    return [
                        'has_error' => [
                            'error_type' => 'order_product_not_found',
                            'order_number' => $order['order_number'],
                            'product' => $product_line['name'] . ' SKU:' . $product_line['sku'],
                        ],
                    ];
                }

                $product_data = [
                    'product_id' => $product->id,
                    'unit_price' => $unit_price,
                    'unit_price_inc_tax' => $unit_price_inc_tax,
                    'variation_id' => $variation->id,
                    'quantity' => $quantity,
                    'enable_stock' => $product->enable_stock,
                    'item_tax' => $line_tax,
                    'tax_id' => null,
                    'line_item_id' => $product_line['sku_id'],
                ];

                // Append transaction_sell_lines_id if update
                if (!empty($sell_lines)) {
                    foreach ($sell_lines as $sell_line) {
                        if ($sell_line->miravia_line_items_id == $product_line['sku_id']) {
                            $product_data['transaction_sell_lines_id'] = $sell_line->id;
                        }
                    }
                }

                $product_lines[] = $product_data;
            } else {
                return [
                    'has_error' => [
                        'error_type' => 'order_product_not_found',
                        'order_number' => $order['order_number'],
                        'product' => $product_line['name'] . ' SKU:' . $product_line['sku'],
                    ],
                ];
            }
        }

        // dd($product_lines);
        // Get customer details
        $customer_details = [];
        $name = $order['address_shipping']['first_name'] . ' ' . $order['address_shipping']['last_name'];
        $customer_details = [
            'first_name' => $order['address_shipping']['first_name'],
            'last_name' => $order['address_shipping']['last_name'],
            'email' => $order['customer_email'],
            'name' => $name,
            'mobile' => $order['address_shipping']['phone'] ?? null,
            'address_line_1' => $order['address_shipping']['address1'] ?? null,
            'address_line_2' => $order['address_shipping']['address2'] ?? null,
            'city' => $order['address_shipping']['city'] ?? null,
            'state' => $order['address_shipping']['address3'] ?? null,
            'country' => $order['address_shipping']['country'] ?? null,
            'zip_code' => $order['address_shipping']['post_code'] ?? null,
        ];

        if (!empty($customer_details['email'])) {
            $customer = Contact::where('business_id', $business_id)
                ->where('email', $customer_details['email'])
                ->OnlyCustomers()
                ->first();

            // If customer not found create new
            if (empty($customer)) {
                $ref_count = $this->transactionUtil->setAndGetReferenceCount('contacts', $business_id);
                $contact_id = $this->transactionUtil->generateReferenceNumber('contacts', $ref_count, $business_id);

                $customer_data = [
                    'business_id' => $business_id,
                    'type' => 'customer',
                    'first_name' => $customer_details['first_name'],
                    'last_name' => $customer_details['last_name'],
                    'name' => $customer_details['name'],
                    'email' => $customer_details['email'],
                    'contact_id' => $contact_id,
                    'mobile' => $customer_details['mobile'],
                    'city' => $customer_details['city'],
                    'state' => $customer_details['state'],
                    'country' => $customer_details['country'],
                    'created_by' => $user_id,
                    'address_line_1' => $customer_details['address_line_1'],
                    'address_line_2' => $customer_details['address_line_2'],
                    'zip_code' => $customer_details['zip_code'],
                ];

                // If name is blank make email address as name
                if (empty(trim($customer_data['name']))) {
                    $customer_data['first_name'] = $customer_details['email'];
                    $customer_data['name'] = $customer_details['email'];
                }
                $customer = Contact::create($customer_data);
            }
        } else {
            $contactUtil = new ContactUtil;
            $customer = $contactUtil->getWalkInCustomer($business_id, false);
        }

        $sell_status = $this->checkStatus($order['statuses']);

        $addresses = [
            'shipping_address' => [
                'shipping_name' => $customer['name'],
                'company' => '',
                'shipping_address_line_1' => $customer['address_line_1'],
                'shipping_address_line_2' => $customer['address_line_2'],
                'shipping_city' => $customer['city'],
                'shipping_state' => $customer['state'],
                'shipping_country' => $customer['country'],
                'shipping_zip_code' => $customer['zip_code'],
            ],
            'billing_address' => [
                'billing_name' => $customer['name'],
                'company' => '',
                'billing_address_line_1' => $customer['address_line_1'],
                'billing_address_line_2' => $customer['address_line_2'],
                'billing_city' => $customer['city'],
                'billing_state' => $customer['state'],
                'billing_country' => $customer['country'],
                'billing_zip_code' => $customer['zip_code'],
            ]
        ];

        $new_sell_data = [
            'business_id' => $business_id,
            'location_id' => $miravia_api_settings->location_id,
            'contact_id' => $customer->id,
            'discount_type' => 'fixed',
            'discount_amount' => 0,
            'shipping_charges' => 0,
            'final_total' => $order['price'] ?? 0,
            'created_by' => $user_id,
            'status' => $sell_status == 'quotation' ? 'draft' : $sell_status,
            'is_quotation' => $sell_status == 'quotation' ? 1 : 0,
            'sub_status' => $sell_status == 'quotation' ? 'quotation' : null,
            'payment_status' => 'paid',
            'additional_notes' => $order['remarks'],
            'transaction_date' => $order['created_at'],
            'customer_group_id' => $customer->customer_group_id,
            'tax_rate_id' => null,
            'sale_note' => null,
            'commission_agent' => null,
            'invoice_no' => $order['order_number'],
            'order_addresses' => json_encode($addresses),
            'shipping_charges' => 0,
            'shipping_details' => implode(', ', $addresses['shipping_address']),
            'shipping_status' => null,
            'shipping_address' => implode(', ', $addresses['shipping_address']),
        ];

        $payment = [
            'amount' => $order['price'],
            'method' => 'cash',
            'card_transaction_number' => '',
            'card_number' => '',
            'card_type' => '',
            'card_holder_name' => '',
            'card_month' => '',
            'card_security' => '',
            'cheque_number' => '',
            'bank_account_number' => '',
            'note' => $order['payment_method'],
            'paid_on' => $order['created_at'],
        ];

        // dd($payment, $new_sell_data, $product_lines);
        if (!empty($sell) && count($sell->payment_lines) > 0) {
            $payment['payment_id'] = $sell->payment_lines->first()->id;
        }

        $new_sell_data['products'] = $product_lines;
        $new_sell_data['payment'] = [$payment];

        return $new_sell_data;
    }

    private function checkStatus($statuses)
    {
        if (in_array('ready_to_ship', $statuses)) {
            $status = 'final';
        } elseif (in_array('delivered', $statuses)) {
            $status = 'final';
        } else {
            $status = $statuses[1] ?? $statuses[0];
        }
        return $status;
    }

    /**
     * Updates existing sale
     *
     * @param  id  $business_id
     * @param  id  $user_id
     * @param  obj  $order
     * @param  obj  $sell
     * @param  array  $business_data
     */
    public function updateSaleFromOrder($business_id, $user_id, $order, $sell, $business_data)
    {
        $input = $this->formatOrderToSale($business_id, $user_id, $order, $sell);

        // dd('updateSaleFromOrder', $input);
        if (!empty($input['has_error'])) {
            return $input['has_error'];
        }

        $invoice_total = [
            'total_before_tax' => $order->total,
            'tax' => 0,
        ];

        $status_before = $sell->status;

        DB::beginTransaction();
        $transaction = $this->transactionUtil->updateSellTransaction($sell, $business_id, $input, $invoice_total, $user_id, false, false);

        //Update Sell lines
        $deleted_lines = $this->transactionUtil->createOrUpdateSellLines($transaction, $input['products'], $input['location_id'], true, $status_before, [], false);

        $this->transactionUtil->createOrUpdatePaymentLines($transaction, $input['payment'], null, null, false);

        //Update payment status
        $transaction->payment_status = 'paid';
        $transaction->save();

        //Update product stock
        $this->productUtil->adjustProductStockForInvoice($status_before, $transaction, $input, false);

        try {
            $this->transactionUtil->adjustMappingPurchaseSell($status_before, $transaction, $business_data, $deleted_lines);
        } catch (PurchaseSellMismatch $e) {
            DB::rollBack();

            return [
                'error_type' => 'order_insuficient_product_qty',
                'order_number' => $order->number,
                'msg' => $e->getMessage(),
            ];
        }

        DB::commit();

        return true;
    }

    /**
     * Creates sync log in the database
     *
     * @param  id  $business_id
     * @param  id  $user_id
     * @param  string  $type
     * @param  array  $errors = null
     */
    public function createSyncLog($business_id, $user_id, $type, $operation = null, $data = [], $errors = null)
    {
        MiraviaSyncLog::create([
            'business_id' => $business_id,
            'sync_type' => $type,
            'created_by' => $user_id,
            'operation_type' => $operation,
            'data' => !empty($data) ? json_encode($data) : null,
            'details' => !empty($errors) ? json_encode($errors) : null,
        ]);
    }

    /**
     * Retrives last synced date from the database
     *
     * @param  id  $business_id
     * @param  string  $type
     * @param  bool  $for_humans = true
     */
    public function getLastSync($business_id, $type, $for_humans = true)
    {
        $last_sync = MiraviaSyncLog::where('business_id', $business_id)
            ->where('sync_type', $type)
            ->max('created_at');

        //If last reset present make last sync to null
        $last_reset = MiraviaSyncLog::where('business_id', $business_id)
            ->where('sync_type', $type)
            ->where('operation_type', 'reset')
            ->max('created_at');
        if (!empty($last_reset) && !empty($last_sync) && $last_reset >= $last_sync) {
            $last_sync = null;
        }

        if (!empty($last_sync) && $for_humans) {
            $last_sync = \Carbon::createFromFormat('Y-m-d H:i:s', $last_sync)->diffForHumans();
        }

        return $last_sync;
    }

    // public function miraviaOrderStatusToPosSellStatus($status, $business_id)
    // {
    //     $default_status_array = [
    //         'pending' => 'draft',
    //         'delivered' => 'final',
    //         'processing' => 'final',
    //         'on-hold' => 'draft',
    //         'completed' => 'final',
    //         'cancelled' => 'draft',
    //         'refunded' => 'draft',
    //         'failed' => 'draft',
    //         'shipped' => 'final',
    //     ];

    //     $api_settings = $this->get_api_settings($business_id);

    //     $status_settings = $api_settings->order_statuses ?? null;

    //     $sale_status = !empty($status_settings) ? $status_settings->$status : null;
    //     $sale_status = empty($sale_status) && array_key_exists($status, $default_status_array) ? $default_status_array[$status] : $sale_status;
    //     $sale_status = empty($sale_status) ? 'final' : $sale_status;

    //     return $sale_status;
    // }

    public function woocommerceOrderStatusToPosShippingStatus($status, $business_id)
    {
        $api_settings = $this->get_api_settings($business_id);

        $status_settings = $api_settings->shipping_statuses ?? null;

        $shipping_status = !empty($status_settings) ? $status_settings->$status : null;

        return $shipping_status;
    }

    /**
     * Splits response to list of 100 and merges all
     *
     * @param  int  $business_id
     * @param  string  $endpoint
     * @param  array  $params = []
     * @return array
     */
    public function getAllResponse($business_id, $endpoint, $params = [])
    {

        //woocommerce api client object
        $miravia = $this->miravia_client($business_id);

        $page = 1;
        $list = [];
        $all_list = [];
        $params['per_page'] = 100;

        do {
            $params['page'] = $page;
            try {
                $list = $miravia->get($endpoint, $params);
            } catch (\Exception $e) {
                return [];
            }
            $all_list = array_merge($all_list, $list);
            $page++;
        } while (count($list) > 0);

        return $all_list;
    }

    /**
     * Retrives all tax rates from woocommerce api
     *
     * @param  id  $business_id
     * @param  obj  $tax_rates
     */
    public function getTaxRates($business_id)
    {
        $tax_rates = $this->getAllResponse($business_id, 'taxes');

        return $tax_rates;
    }

    public function getLastStockUpdated($location_id, $product_id)
    {
        $last_updated = VariationLocationDetails::where('location_id', $location_id)
            ->where('product_id', $product_id)
            ->max('updated_at');

        return $last_updated;
    }

    private function formatDecimalPoint($number, $type = 'currency')
    {
        $precision = 4;
        $currency_precision = session('business.currency_precision', 2);
        $quantity_precision = session('business.quantity_precision', 2);

        if ($type == 'currency' && !empty($currency_precision)) {
            $precision = $currency_precision;
        }
        if ($type == 'quantity' && !empty($quantity_precision)) {
            $precision = $quantity_precision;
        }

        return number_format((float) $number, $precision, '.', '');
    }

    public function isValidImage($path)
    {
        $valid_extenstions = ['jpg', 'jpeg', 'png', 'gif'];

        return !empty($path) && file_exists($path) && in_array(strtolower(pathinfo($path, PATHINFO_EXTENSION)), $valid_extenstions);
    }
}
